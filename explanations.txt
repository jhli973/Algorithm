Question 1:

1. I first get the unique letter from string t using list and set functions, 
2. then check if all the element in set letters exist in s, then return True, otherwise return false. 

time complexity: O(1) + O(26) = O(1) , suppoer each string is consists of 26 letters
space complexity: O(26) + O(1) = O(1)


Question 2:

1. To have palindromic substring, the length of string must have more than 2
2. Then I reverse the string
3. Slice and compare the substring from the original and reversed string
4. Keep and return the longest string

time complexity: O(n^2)
space complexity: O(n)

Question 3:

1. Define a find helper function to track the parent
2. Define a union helper function to union roots depending on the rank (weight)
3. Loop through all vertices in graph and save the vertices in dictionary named parent 
4. Loop through all vertices in graph and save the initial weight (set as zero) in dictionary named rank
5. Get unique edge between vertices 
6. Loop through all edges and compare the parent vertices, if there are different then add the adjacent list into the mini_spaning_tree

time complexity: O(V*E +V)
space complexity: O(5 * V) = O(V)

Question 4:

1. Find the ancestors of n1 node and save its ancestors in a list
2. Find the ancestors of n2 node and save its ancestors in a list
3. Loop through the list and pick the first element   
4. If no common element return None  

time complexity: O(2 * E * V) = O(E *V)
space complexity: O(2 * E) = O(E *V)


Question 5:

1. Check if the Node is valid
2. Loop through the linked list and save each node's value in a list 
3. Make sure the m less than or equal to the length of the list
4. Pop out the last value of the list m times and catch the m th element value and return it       

time complexity: O(V + m)
space complexity: O(V)