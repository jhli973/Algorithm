Question 1:

1. define a helper function build_dict 
2. loop through string s and get substring with same length as string t
3. Compare the dictionary, if any of them returns ture then return true
4. If no same dictionary exist, return false 

time complexity: O(len(s)) 
space complexity: O(1)


Question 2:

1. If the length of string is zero, return None
2. Insert '#' sign into the string
3. Loop through the current right position i
4. If the left and right strings are same, update the length value L[i] at that position
5. Update the maxLPSLength and maxLPSCenterPosition when L[i] value greater than maxLPSLength
6. Return the longest string

time complexity: O(n)
space complexity: O(1)

Question 3:

1. Define a find helper function to track the parent
2. Define a union helper function to union roots depending on the rank (weight)
3. Loop through all vertices in graph and save the vertices in dictionary named parent 
4. Loop through all vertices in graph and save the initial weight (set as zero) in dictionary named rank
5. Get unique edge between vertices 
6. Loop through all edges and compare the parent vertices, if there are different then add the adjacent list into the mini_spaning_tree

time complexity: O(V*E + V + E)
space complexity: O(5) = O(1)
NOTE:I have used Kruskals algorithm, can you point out if anything was wrong? 
       I don't understand how time complexity is O(ElogE)?

Question 4:

1. Find the ancestors of n1 node and save its ancestors in a list
2. Find the ancestors of n2 node and save its ancestors in a list
3. Loop through the list and pick the first element   
4. If no common element return None  

time complexity: O(2 * n) = O(n)
space complexity: O(1) 


Question 5:

1. Check if the Node is valid
2. Loop through the linked list and save each node's value in a list 
3. Make sure the m less than or equal to the length of the list
4. Pop out the last value of the list m times and catch the m th element value and return it       

time complexity: O(n + m) = O(n)
space complexity: O(1)